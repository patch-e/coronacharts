{"openapi":"3.0.0","info":{"title":"Visitor","version":"1.0"},"servers":[{"url":"https://api.salemove.com","description":"Glia REST API base URL"}],"security":[{"BearerAuth":[]}],"paths":{"/visitors":{"post":{"summary":"Create visitor","description":"Integrators may need to engage operators with visitors outside of the web browser or without using the Glia JavaScript API. In this case the integrator can create a visitor entity using the REST API. The response will contain a bearer access token which can be used for all of the following requests related to the visitor.\n\nThe bearer access token should be renewed every 24 hours, see <a href=\"https://docs.glia.com/glia-dev/reference/post_visitors-visitor-id-token\">Renew token</a>.\n\n**Note**\n* To create a site visitor, use a [site's bearer access token](https://docs.glia.com/glia-dev/reference/post_sites-tokens) in the `Authorization` header. The scope of the site's bearer access token must contain `visitors:create` permission, see [Site API Keys](https://docs.glia.com/glia-dev/reference/site-api-keys).\n* See more about the tokens used in Glia REST API in [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).\n","tags":["Visitor"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"native_mobile_visitor":{"type":"object","description":"Extra visitor information that should be specified when creating or renewing a visitor token from a native mobile application. This information is needed to register webhooks for sending push notifications to the mobile device.\n\nPush notifications are supported for both [Apple iOS (APNS)](https://docs.glia.com/glia-dev/reference/webhooks#apple-push-notification-webhook) and [Android (FCM)](https://docs.glia.com/glia-dev/reference/webhooks#firebase-cloud-messaging-webhook) devices.\n","properties":{"device_token":{"type":"string","description":"A token that uniquely identifies a mobile app and a mobile device pair. For Apple iOS (APNS), this is the device token. For Android (FCM), this is the registration token.\n\nThe maximum length is 255 characters.\n","example":"912e991a1a9d87568085afb9cc8bd738bb7ab08988dce04778f78522ab6405b7"}}},"id_token":{"type":"string","description":"A signed JWT that can be used to verify whether the visitor has been authenticated externally. The JWT must include a `sub` claim containing a unique identifier that is mapped to the visitor's identity in Glia. Note that the value of the `exp` claim from the provided ID token will be used as the value of the `exp` claim of the issued Glia visitor access token (`access_token`) in the response.\n","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJlbWFpbCI6ImpvaG4uc21pdGhAZXhhbXBsZS5jb20iLCJuYW1lIjoiSm9obiBTbWl0aCIsImdpdmVuX25hbWUiOiJKb2huIiwiZmFtaWx5X25hbWUiOiJTbWl0aCIsInN1YiI6ImpvaG4uc21pdGhAZXhhbXBsZS5jb206Sm9oblNtaXRoIiwiaWF0IjoxNjQ3NDE4MjU1LCJleHAiOjE2NDc0MjE4NTV9.IE0c2KJS9-xQEqyynFRi_iUaXwgqusPtMz9i3yjIrOvSNF76PP3SkcQpOuvidsBgXDuljI63g0TnU-AVyiUunQ"}}}}}},"responses":{"200":{"description":"OK\n\nUse the bearer token (`access_token`) within next 24 hours to make requests on behalf of the visitor with the\ngiven ID (`id`).\n","content":{"application/vnd.salemove.v1+json":{"schema":{"type":"object","properties":{"id":{"type":"string","description":"The unique ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d"},"token":{"type":"string","description":"_Deprecated_","deprecated":true,"example":"66666666-7777-44f2-9458-b002409f5f87"},"access_token":{"type":"string","description":"The visitor's bearer access token to be used for the next 24 hours.","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.. truncated"},"authenticated_externally":{"type":"boolean","description":"Present with value `true` only if visitor was successfully authenticated and mapped to Glia visitor identity using the `id_token` provided in the request payload.\n","example":true}}}}}}}}},"/visitors/{visitor_id}/token":{"post":{"summary":"Renew token","description":"Visitors created using the REST API have bearer access tokens which for security reasons have short lifetime.\n\nThese tokens should be renewed once in every 24 hours.\n\n**Note**\n* To acquire a new bearer access token for the site visitor, the `Authorization` header must contain a site's bearer access token which scope contains `visitors:create` permission, see [Site's Bearer Access Token](https://docs.glia.com/glia-dev/reference/post_sites-tokens) and [Site API Keys](https://docs.glia.com/glia-dev/reference/site-api-keys).\n* See more about the tokens used in Glia REST API `Authorization` headers in [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).\n","tags":["Visitor"],"parameters":[{"name":"visitor_id","in":"path","required":true,"description":"ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"native_mobile_visitor":{"type":"object","description":"Extra visitor information that should be specified when creating or renewing a visitor token from a native mobile application. This information is needed to register webhooks for sending push notifications to the mobile device.\n\nPush notifications are supported for both [Apple iOS (APNS)](https://docs.glia.com/glia-dev/reference/webhooks#apple-push-notification-webhook) and [Android (FCM)](https://docs.glia.com/glia-dev/reference/webhooks#firebase-cloud-messaging-webhook) devices.\n","properties":{"device_token":{"type":"string","description":"A token that uniquely identifies a mobile app and a mobile device pair. For Apple iOS (APNS), this is the device token. For Android (FCM), this is the registration token.\n\nThe maximum length is 255 characters.\n","example":"912e991a1a9d87568085afb9cc8bd738bb7ab08988dce04778f78522ab6405b7"}}},"id_token":{"type":"string","description":"A signed JWT that can be used to verify whether the visitor has been authenticated externally. The JWT must include a `sub` claim containing a unique identifier that is mapped to the visitor's identity in Glia. Note that the value of the `exp` claim from the provided ID token will be used as the value of the `exp` claim of the issued Glia visitor access token (`access_token`) in the response.\n","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJlbWFpbCI6ImpvaG4uc21pdGhAZXhhbXBsZS5jb20iLCJuYW1lIjoiSm9obiBTbWl0aCIsImdpdmVuX25hbWUiOiJKb2huIiwiZmFtaWx5X25hbWUiOiJTbWl0aCIsInN1YiI6ImpvaG4uc21pdGhAZXhhbXBsZS5jb206Sm9oblNtaXRoIiwiaWF0IjoxNjQ3NDE4MjU1LCJleHAiOjE2NDc0MjE4NTV9.IE0c2KJS9-xQEqyynFRi_iUaXwgqusPtMz9i3yjIrOvSNF76PP3SkcQpOuvidsBgXDuljI63g0TnU-AVyiUunQ"}}}}}},"responses":{"200":{"description":"OK\n\nUse the bearer token (`access_token`) within next 24 hours to make requests on behalf of the visitor with the\ngiven ID (`id`).\n","content":{"application/vnd.salemove.v1+json":{"schema":{"type":"object","properties":{"id":{"type":"string","description":"The unique ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d"},"token":{"type":"string","description":"_Deprecated_","deprecated":true,"example":"66666666-7777-44f2-9458-b002409f5f87"},"access_token":{"type":"string","description":"The visitor's bearer access token to be used for the next 24 hours.","example":"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.. truncated"},"authenticated_externally":{"type":"boolean","description":"Present with value `true` only if visitor was successfully authenticated and mapped to Glia visitor identity using the `id_token` provided in the request payload.\n","example":true}}}}}}}}},"/sites/{site_id}/visitors/{visitor_id}":{"get":{"summary":"Fetch visitor","description":"Fetches the visitor's information for a visitor that has an ID `visitor_id` on the site with ID `site_id`.\n\nIf visitor is authenticated, the response will include the attributes and tokens fetched from the authentication provider.\n","tags":["Visitor"],"parameters":[{"in":"path","required":true,"name":"site_id","description":"ID of the site.","schema":{"type":"string"},"example":"def34343-e888-43ae-99e0-07a676e9a111"},{"name":"visitor_id","in":"path","required":true,"description":"ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d","schema":{"type":"string"}}],"responses":{"200":{"description":"OK\n\nDetails of the visitor with ID `visitor_id` on the site with the ID `site_id`. For authenticated visitors the\nattributes and tokens fetched from the authentication provider are included.\n","content":{"application/vnd.salemove.v1+json":{"schema":{"type":"object","properties":{"href":{"type":"string","description":"The visitor's information URL.","example":"https://api.salemove.com/sites/55555555-6708-4755-b6c9-35f9889e42dd/visitors/55555555-0000..."},"name":{"type":"string","description":"The visitor's name.","example":"Mark White"},"email":{"type":"string","description":"The visitor's email.","example":"mark.white@lawoffice.com"},"phone":{"type":"string","description":"The visitor's phone number.","example":"+0012024561111"},"note":{"type":"string","description":"The notes associated with the visitor.","example":"Bought insurance previously; considering upgrade."},"custom_attributes":{"type":"object","description":"An object with custom key-value pairs to be assigned to the visitor. The server treats all keys and values as\nstrings and also returns them as strings. Nested key-value pairs are not supported.\n","example":{"home_address":"Washington, DC"}},"id":{"type":"string","description":"The unique ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d"},"banned":{"type":"boolean","description":"Shows if the visitor is banned from the site.","enum":[true,false]},"authenticated_attributes":{"type":"object","description":"Visitor's attributes and tokens fetched from the authentication provider, if visitor is authenticated. Empty,\nif visitor is not yet authenticated.\n","properties":{"visitor_authentication_id":{"type":"string","description":"ID of the authentication request used to authenticate the visitor.\n"},"visitor_name":{"type":"string","description":"Visitor's authenticated name.\n"},"visitor_preferred_name":{"type":"string","description":"Visitor's authenticated preferred name.\n"},"visitor_email":{"type":"string","description":"Visitor's authenticated email.\n"},"authentication_provider_id":{"type":"string","description":"The ID of the authentication provider used to authenticate visitor.\n"},"issuer":{"type":"string","description":"Issuer as returned by the authentication provider during visitor authentication.\n"},"subject":{"type":"string","description":"Subject as returned by the authentication provider during visitor authentication.\n"},"id_token":{"type":"string","description":"The ID token issued by the authentication provider according to the OpenID Connect standard. Only relevant\nwhen the authentication provider type is `openid_connect`.\n"},"access_token":{"type":"string","description":"The access token to retrieve additional visitor context or perform operations on behalf of a visitor.\n"},"authenticated_at":{"type":"string","description":"The UTC timestamp of the visitor's authentication.\n"}}}}}}}}}},"patch":{"summary":"Update visitor","description":"Updates the visitor's information for a specific `visitor_id` and matching the site with a matching `site_id`.\n","tags":["Visitor"],"parameters":[{"in":"path","required":true,"name":"site_id","description":"ID of the site.","schema":{"type":"string"},"example":"def34343-e888-43ae-99e0-07a676e9a111"},{"name":"visitor_id","in":"path","required":true,"description":"ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"type":"object","properties":{"name":{"type":"string","description":"The visitor's name.","example":"Mark White"},"email":{"type":"string","description":"The visitor's email.","example":"mark.white@lawoffice.com"},"phone":{"type":"string","description":"The visitor's phone number.","example":"+0012024561111"},"note":{"type":"string","description":"The notes associated with the visitor.","example":"Bought insurance previously; considering upgrade."},"note_update_method":{"type":"string","description":"Specifies a method for updating the visitor's note.\n\n* `replace` - the notes for the visitor will be overwritten by the field `note` in the request.\n* `append` - the line break (`\\n`) will be added and the field `note` in the request will be appended to the existing\nvisitor’s notes.\n","default":"replace","enum":["replace","append"]},"custom_attributes":{"type":"object","description":"An object with custom key-value pairs to be assigned to the visitor. The server treats all keys and values as\nstrings and also returns them as strings. Nested key-value pairs are not supported.\n","example":{"home_address":"Washington, DC"}},"custom_attributes_update_method":{"type":"string","description":"Specifies the method for updating custom attributes.\n\n* `replace` - all custom attributes for the visitor will be overwritten by the field `custom_attributes` in the\nrequest.\n* `merge` - only custom attributes present in the request will be added or updated. In the case of `merge`, it is\npossible to remove a custom attribute by setting its value to `null`.\n","default":"replace","enum":["replace","merge"]},"context":{"type":"object","description":"An object with the visitor's browser context.\n\nThe `context` and `custom_attributes` are needed to trigger `visitor_custom_attributes_changed` business rule\nevent.\nContent for this can be obtained from [Visitor JS SDK](https://sdk-docs.glia.com/visitor-js-api/current/Salemove.html#getBrowserContext).\n"}}}}}},"responses":{"200":{"description":"Visitor's information was updated."}}}},"/sites/{site_id}/visitor_authentication_providers":{"post":{"summary":"Add provider","description":"Adds an authentication provider to the given site.\n\nThe Glia platform currently integrates with OpenID Connect and OAuth2 providers. Additionally, it's possible to add a custom Direct ID Token provider which enables seamless authentication of users without explicit user consent. Note that one site can have multiple authentication providers.\n","tags":["Authentication providers"],"parameters":[{"in":"path","required":true,"name":"site_id","description":"ID of the site.","schema":{"type":"string"},"example":"def34343-e888-43ae-99e0-07a676e9a111"}],"requestBody":{"description":"Parameters for adding auth provider.","required":true,"content":{"application/json":{"schema":{"oneOf":[{"title":"OpenID Connect","properties":{"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `openid_connect` in the case of OpenID Connect.\n","type":"string","enum":["openid_connect"],"example":"openid_connect"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"scope":{"type":"string","description":"One or more OpenID Connect scopes separated by space. Determines which visitor's details (e.g. name or email) are retrieved in the ID token. The scope must include at least `openid` but to receive visitor attributes also `email` and `profile` (separated by space) should be added.\n\nSee [openid.net](https://openid.net/specs/openid-connect-basic-1_0.html#Scopes) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"}},"required":["name","type","authorize_url","access_token_url","scope","client_id","client_secret","default_provider"]},{"title":"OAuth2","properties":{"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `oauth2` in the case of OAuth 2.\n","type":"string","enum":["oauth2"],"example":"oauth2"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"userinfo_url":{"type":"string","description":"The URL from where Glia will fetch user information; is determined by the authentication provider. Note that in case `type` is `openid_connect` you find the same data within the ID token received via `access_token_url`.\n\nGlia will request the URL from the authentication provider via HTTP GET method that contains `Authorization: Bearer access_token` and `Accept: application/json` headers where `access_token` was retrieved from `access_token_url` beforehand.\n\nThe response fields `name`, `email`, and `preferred_username` are used to show the visitor information in the Glia Hub. Other response fields are ignored. An example response looks like this:\n\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example\"\n  }\n  ```\n"},"scope":{"type":"string","description":"One or more OAuth 2.0 scopes separated by space. Determines which visitor's details (e.g. name or email) are granted by the access token issued to the application.\n\nSee [oauth.net](https://oauth.net/2/scope/) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"}},"required":["name","type","authorize_url","access_token_url","scope","client_id","client_secret","default_provider"]},{"title":"Direct ID Token","properties":{"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `direct_id_token` in the case of Direct ID Token.\n","type":"string","enum":["direct_id_token"],"example":"direct_id_token"},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"jwt_key_autofetch_enabled":{"type":"boolean","description":"If `true`, the keys will be fetched from the endpoint defined in `jwt_key_url`. If `false`, the keys provided in `jwt_verification_keys` will be used.\n","example":false},"jwt_key_url":{"type":"string","description":"The URL of the POST endpoint which returns the public key that Glia can use to verify the authenticated visitor's token (see `id_token` in [Create visitor](https://docs.glia.com/glia-dev/reference/post_visitors) and [Renew token](https://docs.glia.com/glia-dev/reference/post_visitors-visitor-id-token)).\n","example":"https://example.com/jwt_key_url"},"jwt_verification_keys":{"type":"array","description":"Array of public key objects that Glia can use to verify the authenticated visitor's token. Only one public key is mandatory while two keys can be provided for key rotation.\n","items":{"type":"object","properties":{"key":{"type":"string","description":"Public key that Glia can use to verify the authenticated visitor's token. The key must be in the PEM format, including a line break after the footer row.","example":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n"},"algorithm":{"type":"string","description":"The public key algorithm used to sign and verify the authenticated visitor's token. <a href=\"https://datatracker.ietf.org/doc/html/rfc7518#section-3.4\" target=\"rfc7518\">ES256</a> (`es256`) is the only algorithm Glia currently supports.","example":"es256"}}}}},"required":["name","type","default_provider","jwt_key_autofetch_enabled"]}]},"examples":{"openid_connect":{"summary":"OpenID Connect","value":{"name":"OpenID Connect provider settings for example.com","type":"openid_connect","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","scope":"openid email profile","client_id":"0oan31sqxd7s1gkg30x7","client_secret":"25af3b86e11884ef5e8ef70a0ad06cba81b89ed6af3781a0","default_provider":true}},"oauth2":{"summary":"OAuth 2.0","value":{"name":"OAuth 2.0 provider settings for example.com","type":"oauth2","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","userinfo_url":"https://example.com/oauth2/v1/userinfo","scope":"name email","client_id":"7s1gkg30x70oan31sqxd","client_secret":"0ad06cba81b89ed6af3781a025af3b86e11884ef5e8ef70a","default_provider":false}},"direct_id_token":{"summary":"Direct ID Token","value":{"name":"Direct ID Token provider settings for example.com","type":"direct_id_token","jwt_key_autofetch_enabled":false,"jwt_key_url":"https://example.com/jwt_key_url","jwt_verification_keys":[{"key":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n","algorithm":"es256"}],"default_provider":false}}}}}},"responses":{"200":{"description":"OK","content":{"application/vnd.salemove.v1+json":{"schema":{"oneOf":[{"title":"OpenID Connect","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `openid_connect` in the case of OpenID Connect.\n","type":"string","enum":["openid_connect"],"example":"openid_connect"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"scope":{"type":"string","description":"One or more OpenID Connect scopes separated by space. Determines which visitor's details (e.g. name or email) are retrieved in the ID token. The scope must include at least `openid` but to receive visitor attributes also `email` and `profile` (separated by space) should be added.\n\nSee [openid.net](https://openid.net/specs/openid-connect-basic-1_0.html#Scopes) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}},{"title":"OAuth2","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `oauth2` in the case of OAuth 2.\n","type":"string","enum":["oauth2"],"example":"oauth2"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"userinfo_url":{"type":"string","description":"The URL from where Glia will fetch user information; is determined by the authentication provider. Note that in case `type` is `openid_connect` you find the same data within the ID token received via `access_token_url`.\n\nGlia will request the URL from the authentication provider via HTTP GET method that contains `Authorization: Bearer access_token` and `Accept: application/json` headers where `access_token` was retrieved from `access_token_url` beforehand.\n\nThe response fields `name`, `email`, and `preferred_username` are used to show the visitor information in the Glia Hub. Other response fields are ignored. An example response looks like this:\n\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example\"\n  }\n  ```\n"},"scope":{"type":"string","description":"One or more OAuth 2.0 scopes separated by space. Determines which visitor's details (e.g. name or email) are granted by the access token issued to the application.\n\nSee [oauth.net](https://oauth.net/2/scope/) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}},{"title":"Direct ID Token","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `direct_id_token` in the case of Direct ID Token.\n","type":"string","enum":["direct_id_token"],"example":"direct_id_token"},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"jwt_key_autofetch_enabled":{"type":"boolean","description":"If `true`, the keys will be fetched from the endpoint defined in `jwt_key_url`. If `false`, the keys provided in `jwt_verification_keys` will be used.\n","example":false},"jwt_key_url":{"type":"string","description":"The URL of the POST endpoint which returns the public key that Glia can use to verify the authenticated visitor's token (see `id_token` in [Create visitor](https://docs.glia.com/glia-dev/reference/post_visitors) and [Renew token](https://docs.glia.com/glia-dev/reference/post_visitors-visitor-id-token)).\n","example":"https://example.com/jwt_key_url"},"jwt_verification_keys":{"type":"array","description":"Array of public key objects that Glia can use to verify the authenticated visitor's token. Only one public key is mandatory while two keys can be provided for key rotation.\n","items":{"type":"object","properties":{"key":{"type":"string","description":"Public key that Glia can use to verify the authenticated visitor's token. The key must be in the PEM format, including a line break after the footer row.","example":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n"},"algorithm":{"type":"string","description":"The public key algorithm used to sign and verify the authenticated visitor's token. <a href=\"https://datatracker.ietf.org/doc/html/rfc7518#section-3.4\" target=\"rfc7518\">ES256</a> (`es256`) is the only algorithm Glia currently supports.","example":"es256"}}}},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}}]},"examples":{"OpenID Connect":{"value":{"id":"4f0caef8-f888-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"Authentication provider settings for example.com","type":"openid_connect","authorize_url":"https://example.com.com/oauth2/v1/authorize","access_token_url":"https://example.com.com/oauth2/v1/token","scope":"openid email profile","default_provider":true,"client_id":"0oan31sqxd7s1gkg30x7","created_at":"2019-11-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2019-11-20T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}},"OAuth 2.0":{"value":{"id":"4f0caef8-f777-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"OAuth 2.0 provider settings for example.com","type":"oauth2","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","userinfo_url":"https://example.com/oauth2/v1/userinfo","scope":"name email","client_id":"7s1gkg30x70oan31sqxd","default_provider":false,"created_at":"2022-06-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2022-06-21T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}},"Direct ID Token":{"value":{"id":"4f0caef8-f666-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"Direct ID Token provider settings for example.com","type":"direct_id_token","jwt_key_autofetch_enabled":false,"jwt_key_url":"https://example.com/jwt_key_url","jwt_verification_keys":[{"key":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n","algorithm":"es256"}],"default_provider":false,"created_at":"2022-06-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2022-06-21T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}}}}}}}},"get":{"summary":"List providers","description":"Gets the list of the authentication providers added to the given site.\n","tags":["Authentication providers"],"parameters":[{"in":"path","required":true,"name":"site_id","description":"ID of the site.","schema":{"type":"string"},"example":"def34343-e888-43ae-99e0-07a676e9a111"}],"responses":{"200":{"description":"OK","content":{"application/vnd.salemove.v1+json":{"schema":{"type":"array","items":{"oneOf":[{"title":"OpenID Connect","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `openid_connect` in the case of OpenID Connect.\n","type":"string","enum":["openid_connect"],"example":"openid_connect"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"scope":{"type":"string","description":"One or more OpenID Connect scopes separated by space. Determines which visitor's details (e.g. name or email) are retrieved in the ID token. The scope must include at least `openid` but to receive visitor attributes also `email` and `profile` (separated by space) should be added.\n\nSee [openid.net](https://openid.net/specs/openid-connect-basic-1_0.html#Scopes) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}},{"title":"OAuth2","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `oauth2` in the case of OAuth 2.\n","type":"string","enum":["oauth2"],"example":"oauth2"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"userinfo_url":{"type":"string","description":"The URL from where Glia will fetch user information; is determined by the authentication provider. Note that in case `type` is `openid_connect` you find the same data within the ID token received via `access_token_url`.\n\nGlia will request the URL from the authentication provider via HTTP GET method that contains `Authorization: Bearer access_token` and `Accept: application/json` headers where `access_token` was retrieved from `access_token_url` beforehand.\n\nThe response fields `name`, `email`, and `preferred_username` are used to show the visitor information in the Glia Hub. Other response fields are ignored. An example response looks like this:\n\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example\"\n  }\n  ```\n"},"scope":{"type":"string","description":"One or more OAuth 2.0 scopes separated by space. Determines which visitor's details (e.g. name or email) are granted by the access token issued to the application.\n\nSee [oauth.net](https://oauth.net/2/scope/) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}},{"title":"Direct ID Token","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `direct_id_token` in the case of Direct ID Token.\n","type":"string","enum":["direct_id_token"],"example":"direct_id_token"},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"jwt_key_autofetch_enabled":{"type":"boolean","description":"If `true`, the keys will be fetched from the endpoint defined in `jwt_key_url`. If `false`, the keys provided in `jwt_verification_keys` will be used.\n","example":false},"jwt_key_url":{"type":"string","description":"The URL of the POST endpoint which returns the public key that Glia can use to verify the authenticated visitor's token (see `id_token` in [Create visitor](https://docs.glia.com/glia-dev/reference/post_visitors) and [Renew token](https://docs.glia.com/glia-dev/reference/post_visitors-visitor-id-token)).\n","example":"https://example.com/jwt_key_url"},"jwt_verification_keys":{"type":"array","description":"Array of public key objects that Glia can use to verify the authenticated visitor's token. Only one public key is mandatory while two keys can be provided for key rotation.\n","items":{"type":"object","properties":{"key":{"type":"string","description":"Public key that Glia can use to verify the authenticated visitor's token. The key must be in the PEM format, including a line break after the footer row.","example":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n"},"algorithm":{"type":"string","description":"The public key algorithm used to sign and verify the authenticated visitor's token. <a href=\"https://datatracker.ietf.org/doc/html/rfc7518#section-3.4\" target=\"rfc7518\">ES256</a> (`es256`) is the only algorithm Glia currently supports.","example":"es256"}}}},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}}]},"example":[{"id":"4f0caef8-f888-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"Authentication provider settings for example.com","type":"openid_connect","authorize_url":"https://example.com/authorize_url","access_token_url":"https://example.com/access_token_url","scope":"openid email profile","default_provider":true,"client_id":"0oan31sqxd7s1gkg30x7","created_at":"2019-11-15T07:16:55.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2019-11-15T07:16:55.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"},{"id":"4f0caef8-f777-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"OAuth 2.0 provider settings for example.com","type":"oauth2","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","userinfo_url":"https://example.com/oauth2/v1/userinfo","scope":"name email","client_id":"7s1gkg30x70oan31sqxd","default_provider":false,"created_at":"2022-06-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2022-06-21T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"},{"id":"4f0caef8-f666-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"Direct ID Token provider settings for example.com","type":"direct_id_token","default_provider":false,"jwt_key_autofetch_enabled":false,"jwt_key_url":"https://example.com/jwt_key_url","jwt_verification_keys":[{"key":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n","algorithm":"es256"}],"created_at":"2022-06-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2022-06-21T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}]}}}}}}},"/sites/{site_id}/visitor_authentication_providers/{provider_id}":{"patch":{"summary":"Update provider","description":"Updates the given authentication provider.\n","tags":["Authentication providers"],"parameters":[{"in":"path","required":true,"name":"site_id","description":"ID of the site.","schema":{"type":"string"},"example":"def34343-e888-43ae-99e0-07a676e9a111"},{"name":"provider_id","in":"path","required":true,"example":"02d7aaf2-966e-4292-9102-4afcc20397f3","description":"ID of the authentication provider.","schema":{"type":"string"}}],"requestBody":{"description":"Parameters for updating auth provider.","required":true,"content":{"application/json":{"schema":{"oneOf":[{"title":"OpenID Connect","properties":{"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `openid_connect` in the case of OpenID Connect.\n","type":"string","enum":["openid_connect"],"example":"openid_connect"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"scope":{"type":"string","description":"One or more OpenID Connect scopes separated by space. Determines which visitor's details (e.g. name or email) are retrieved in the ID token. The scope must include at least `openid` but to receive visitor attributes also `email` and `profile` (separated by space) should be added.\n\nSee [openid.net](https://openid.net/specs/openid-connect-basic-1_0.html#Scopes) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"}},"required":["name","type","authorize_url","access_token_url","scope","client_id","client_secret","default_provider"]},{"title":"OAuth2","properties":{"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `oauth2` in the case of OAuth 2.\n","type":"string","enum":["oauth2"],"example":"oauth2"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"userinfo_url":{"type":"string","description":"The URL from where Glia will fetch user information; is determined by the authentication provider. Note that in case `type` is `openid_connect` you find the same data within the ID token received via `access_token_url`.\n\nGlia will request the URL from the authentication provider via HTTP GET method that contains `Authorization: Bearer access_token` and `Accept: application/json` headers where `access_token` was retrieved from `access_token_url` beforehand.\n\nThe response fields `name`, `email`, and `preferred_username` are used to show the visitor information in the Glia Hub. Other response fields are ignored. An example response looks like this:\n\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example\"\n  }\n  ```\n"},"scope":{"type":"string","description":"One or more OAuth 2.0 scopes separated by space. Determines which visitor's details (e.g. name or email) are granted by the access token issued to the application.\n\nSee [oauth.net](https://oauth.net/2/scope/) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"}},"required":["name","type","authorize_url","access_token_url","scope","client_id","client_secret","default_provider"]},{"title":"Direct ID Token","properties":{"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `direct_id_token` in the case of Direct ID Token.\n","type":"string","enum":["direct_id_token"],"example":"direct_id_token"},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"jwt_key_autofetch_enabled":{"type":"boolean","description":"If `true`, the keys will be fetched from the endpoint defined in `jwt_key_url`. If `false`, the keys provided in `jwt_verification_keys` will be used.\n","example":false},"jwt_key_url":{"type":"string","description":"The URL of the POST endpoint which returns the public key that Glia can use to verify the authenticated visitor's token (see `id_token` in [Create visitor](https://docs.glia.com/glia-dev/reference/post_visitors) and [Renew token](https://docs.glia.com/glia-dev/reference/post_visitors-visitor-id-token)).\n","example":"https://example.com/jwt_key_url"},"jwt_verification_keys":{"type":"array","description":"Array of public key objects that Glia can use to verify the authenticated visitor's token. Only one public key is mandatory while two keys can be provided for key rotation.\n","items":{"type":"object","properties":{"key":{"type":"string","description":"Public key that Glia can use to verify the authenticated visitor's token. The key must be in the PEM format, including a line break after the footer row.","example":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n"},"algorithm":{"type":"string","description":"The public key algorithm used to sign and verify the authenticated visitor's token. <a href=\"https://datatracker.ietf.org/doc/html/rfc7518#section-3.4\" target=\"rfc7518\">ES256</a> (`es256`) is the only algorithm Glia currently supports.","example":"es256"}}}}},"required":["name","type","default_provider","jwt_key_autofetch_enabled"]}]},"examples":{"openid_connect":{"summary":"OpenID Connect","value":{"name":"OpenID Connect provider settings for example.com","type":"openid_connect","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","scope":"openid email profile","client_id":"0oan31sqxd7s1gkg30x7","client_secret":"25af3b86e11884ef5e8ef70a0ad06cba81b89ed6af3781a0","default_provider":true}},"oauth2":{"summary":"OAuth 2.0","value":{"name":"OAuth 2.0 provider settings for example.com","type":"oauth2","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","userinfo_url":"https://example.com/oauth2/v1/userinfo","scope":"name email","client_id":"7s1gkg30x70oan31sqxd","client_secret":"0ad06cba81b89ed6af3781a025af3b86e11884ef5e8ef70a","default_provider":false}},"direct_id_token":{"summary":"Direct ID Token","value":{"name":"Direct ID Token provider settings for example.com","type":"direct_id_token","jwt_key_autofetch_enabled":false,"jwt_key_url":"https://example.com/jwt_key_url","jwt_verification_keys":[{"key":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n","algorithm":"es256"}],"default_provider":false}}}}}},"responses":{"200":{"description":"OK","content":{"application/vnd.salemove.v1+json":{"schema":{"oneOf":[{"title":"OpenID Connect","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `openid_connect` in the case of OpenID Connect.\n","type":"string","enum":["openid_connect"],"example":"openid_connect"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"scope":{"type":"string","description":"One or more OpenID Connect scopes separated by space. Determines which visitor's details (e.g. name or email) are retrieved in the ID token. The scope must include at least `openid` but to receive visitor attributes also `email` and `profile` (separated by space) should be added.\n\nSee [openid.net](https://openid.net/specs/openid-connect-basic-1_0.html#Scopes) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}},{"title":"OAuth2","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `oauth2` in the case of OAuth 2.\n","type":"string","enum":["oauth2"],"example":"oauth2"},"authorize_url":{"description":"The URL where Glia directs the visitor to authenticate; is determined by the authentication provider.\n","type":"string"},"access_token_url":{"type":"string","description":"The URL from where Glia will fetch the ID and/or access tokens; is determined by the authentication provider.\n"},"userinfo_url":{"type":"string","description":"The URL from where Glia will fetch user information; is determined by the authentication provider. Note that in case `type` is `openid_connect` you find the same data within the ID token received via `access_token_url`.\n\nGlia will request the URL from the authentication provider via HTTP GET method that contains `Authorization: Bearer access_token` and `Accept: application/json` headers where `access_token` was retrieved from `access_token_url` beforehand.\n\nThe response fields `name`, `email`, and `preferred_username` are used to show the visitor information in the Glia Hub. Other response fields are ignored. An example response looks like this:\n\n\n  ```json\n  {\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example\"\n  }\n  ```\n"},"scope":{"type":"string","description":"One or more OAuth 2.0 scopes separated by space. Determines which visitor's details (e.g. name or email) are granted by the access token issued to the application.\n\nSee [oauth.net](https://oauth.net/2/scope/) for details.\n"},"client_id":{"type":"string","description":"The client ID that Glia uses when fetching the ID and/or access tokens from the authentication provider.\n"},"client_secret":{"type":"string","description":"The client secret that goes with the client ID above."},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}},{"title":"Direct ID Token","properties":{"id":{"type":"string","description":"The ID of the authentication provider.\n"},"site_id":{"type":"string","description":"The ID of the site for which the authentication providers are fetched.\n"},"name":{"description":"Descriptive name of the authentication provider.","type":"string"},"type":{"description":"Type of the authentication provider. It is `direct_id_token` in the case of Direct ID Token.\n","type":"string","enum":["direct_id_token"],"example":"direct_id_token"},"default_provider":{"type":"boolean","description":"`true` if the added authentication provider should be the default one, `false` otherwise. There can be only one default provider for each site.\n"},"jwt_key_autofetch_enabled":{"type":"boolean","description":"If `true`, the keys will be fetched from the endpoint defined in `jwt_key_url`. If `false`, the keys provided in `jwt_verification_keys` will be used.\n","example":false},"jwt_key_url":{"type":"string","description":"The URL of the POST endpoint which returns the public key that Glia can use to verify the authenticated visitor's token (see `id_token` in [Create visitor](https://docs.glia.com/glia-dev/reference/post_visitors) and [Renew token](https://docs.glia.com/glia-dev/reference/post_visitors-visitor-id-token)).\n","example":"https://example.com/jwt_key_url"},"jwt_verification_keys":{"type":"array","description":"Array of public key objects that Glia can use to verify the authenticated visitor's token. Only one public key is mandatory while two keys can be provided for key rotation.\n","items":{"type":"object","properties":{"key":{"type":"string","description":"Public key that Glia can use to verify the authenticated visitor's token. The key must be in the PEM format, including a line break after the footer row.","example":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n"},"algorithm":{"type":"string","description":"The public key algorithm used to sign and verify the authenticated visitor's token. <a href=\"https://datatracker.ietf.org/doc/html/rfc7518#section-3.4\" target=\"rfc7518\">ES256</a> (`es256`) is the only algorithm Glia currently supports.","example":"es256"}}}},"created_by":{"type":"string","description":"A user ID (in UUID v4 format) of who created the resource.","example":"ec317122-e777-4b43-996d-34a2ed3b76d8"},"created_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was created.","example":"2016-06-21T09:12:33.001Z"},"updated_by":{"type":"string","description":"A user ID (in UUID v4 format) of who updated the resource.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"updated_at":{"type":"string","description":"An ISO-8601 timestamp of when the resource was updated.","example":"2016-06-21T09:12:33.001Z"}}}]},"examples":{"OpenID Connect":{"value":{"id":"4f0caef8-f888-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"Authentication provider settings for example.com","type":"openid_connect","authorize_url":"https://example.com.com/oauth2/v1/authorize","access_token_url":"https://example.com.com/oauth2/v1/token","scope":"openid email profile","default_provider":true,"client_id":"0oan31sqxd7s1gkg30x7","created_at":"2019-11-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2019-11-20T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}},"OAuth 2.0":{"value":{"id":"4f0caef8-f777-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"OAuth 2.0 provider settings for example.com","type":"oauth2","authorize_url":"https://example.com/oauth2/v1/authorize","access_token_url":"https://example.com/oauth2/v1/token","userinfo_url":"https://example.com/oauth2/v1/userinfo","scope":"name email","client_id":"7s1gkg30x70oan31sqxd","default_provider":false,"created_at":"2022-06-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2022-06-21T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}},"Direct ID Token":{"value":{"id":"4f0caef8-f666-4dff-b238-d112fdfae623","site_id":"def34343-e888-43ae-99e0-07a676e9a111","name":"Direct ID Token provider settings for example.com","type":"direct_id_token","jwt_key_autofetch_enabled":false,"jwt_key_url":"https://example.com/jwt_key_url","jwt_verification_keys":[{"key":"-----BEGIN PUBLIC KEY-----\\nMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEARBJTVqyfU9nGRdtRxKeWRQFr3fR\\n02XzT2qCnKvme8tpWkZ23VCbIPcJYR0/qGhLatyhevIVQysY8iPgiLCJ0e==\\n-----END PUBLIC KEY-----\\n","algorithm":"es256"}],"default_provider":false,"created_at":"2022-06-20T01:32:38.000Z","created_by":"ec317122-e777-4b43-996d-34a2ed3b76d8","updated_at":"2022-06-21T01:32:38.000Z","updated_by":"ec317122-e777-4b43-996d-34a2ed3b76d8"}}}}}}}}},"/visitor_authentication_requests":{"post":{"summary":"Request authentication","description":"In order to authenticate the visitor using an authentication provider, an authentication request must be created.\n\nNote that in addition to  this REST API endpoint, there is  an authentication request message that can be used to request authentication from a bot and the Visitor JS SDK has a method `createAuthenticationRequest` to request authentication from visitor side.\n\nSee:\n* [Authentication request message](doc:authentication-request)\n* [`createAuthenticationRequest`](https://sdk-docs.glia.com/visitor-js-api/current/Salemove.html#createAuthenticationRequest)\n","tags":["Authentication requests"],"requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["site_id","visitor_id","authentication_provider_id"],"properties":{"authentication_provider_id":{"description":"The ID of the authentication provider to be used.","type":"string","example":"4f0caef8-f888-4dff-b238-d112fdfae623"},"webhooks":{"description":"Array of webhook objects described in HTTP Webhooks. Allowed events are:\n\n* `visitor.authentication.success`\n* `visitor.authentication.failure`\n\nSee details in [Webhooks](ref:webhooks).\n","type":"array","items":{"type":"object","properties":{"url":{"type":"string","description":"The URL (including protocol) to which the HTTP request will be sent to. See more in [HTTP webhooks](ref:webhooks#registering).","example":"http://example.com/webhook"},"method":{"type":"string","description":"One of the HTTP methods, see [HTTP webhooks](ref:webhooks#registering).\n","example":"POST"},"events":{"type":"array","description":"Array of events, see see [HTTP webhooks](ref:webhooks#registering).\n","items":{"type":"string","enum":["visitor.authentication.success","visitor.authentication.failure"],"example":"visitor.authentication.success"}}}}},"site_id":{"description":"The ID of the site to which authentication request will be created.","type":"string","example":"def34343-e888-43ae-99e0-07a676e9a111"},"visitor_id":{"description":"The ID of the visitor to whom authentication request will be created.","type":"string","example":"c2c9106e-e888-47b2-8db3-089fb49dc9a5"}}}}}},"responses":{"200":{"description":"OK","content":{"application/vnd.salemove.v1+json":{"schema":{"properties":{"authentication_request_id":{"type":"string","example":"4bfa559f-0e22-43b2-935b-af3d627c0a85"}}}}}}}}},"/visitor_authentication_requests/{authentication_request_id}":{"delete":{"summary":"Cancel authentication","description":"Closes an on-going authentication request for a specific visitor user on a specific site.\n","tags":["Authentication requests"],"parameters":[{"name":"authentication_request_id","in":"path","required":true,"description":"ID of the authentication request, generated during creation.","example":"33f268c6-6a80-4430-95a8-44e1dd854053","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"required":["site_id","visitor_id","fail_reason"],"properties":{"fail_reason":{"type":"string","description":"The reason why the authentication request is closed. Can be any string to clearly indicate the reason: a\nhuman-readable explanation, error code, etc.\n","example":"Reason why the authentication request has been closed"},"site_id":{"description":"The ID of the site to which authentication request will be created.","type":"string","example":"def34343-e888-43ae-99e0-07a676e9a111"},"visitor_id":{"description":"The ID of the visitor to whom authentication request will be created.","type":"string","example":"c2c9106e-e888-47b2-8db3-089fb49dc9a5"}}}}}},"responses":{"200":{"description":"OK"}}}},"/sites/{site_id}/visitors/{visitor_id}/last_operator":{"get":{"summary":"Fetch last operator","tags":["Last operator"],"description":"Fetches the `id` and `team_ids` of the last operator that had the last engagement or proactive engagement request with the visitor with ID `visitor_id` on the site with ID `site_id`.\n\n**Note**\nTo fetch the last operator use a [site's bearer access token](https://docs.glia.com/glia-dev/reference/post_sites-tokens) in the `Authorization` header. The scope of the site's bearer access token must contain `outbound_sms:create` permission, see [Site API Keys](https://docs.glia.com/glia-dev/reference/site-api-keys).\n* See more about the tokens used in Glia REST API in [Authorization Header](https://docs.glia.com/glia-dev/reference/authorization-header).\n","parameters":[{"in":"path","required":true,"name":"site_id","description":"ID of the site.","schema":{"type":"string"},"example":"def34343-e888-43ae-99e0-07a676e9a111"},{"name":"visitor_id","in":"path","required":true,"description":"ID of the visitor.","example":"55555555-0000-4f8e-8526-e52146d5cb4d","schema":{"type":"string"}}],"responses":{"200":{"description":"OK\n\nThe `id` and `team_ids` of the last operator that had the last engagement or proactive engagement request with the visitor with ID `visitor_id` on the site with ID `site_id`.\n","content":{"application/vnd.salemove.v1+json":{"schema":{"type":"object","properties":{"id":{"type":"string","description":"The unique ID of the operator.","example":"ec317122-e888-4b43-996d-34a2ed3b76d8"},"team_ids":{"type":"array","description":"Set of team ID-s the operator belongs to on the site with ID `site_id`.","items":{"type":"string"},"example":["4918e73f-e888-45cb-bc69-67cc541849ea"]}}}}}},"204":{"description":"No Content\n\nThere is no operator to match the request.\n"}}}}},"components":{"securitySchemes":{"BearerAuth":{"type":"http","scheme":"bearer"}}},"x-readme":{"explorer-enabled":true,"proxy-enabled":true,"samples-enabled":true}}
